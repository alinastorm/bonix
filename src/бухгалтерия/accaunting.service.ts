import { Injectable } from '@nestjs/common';
import { Программа1сБухБониксАвто } from 'src/_commons/services/1сProgramm/бухBonixAvto.service';
import { Программа1сБухСнаб } from 'src/_commons/services/1сProgramm/бухСнабИнвест.service';
import { Программа1сУпр } from 'src/_commons/services/1сProgramm/upr.service';
import { ЭлектроннаяПочта } from '../_commons/services/email/email.service'
import { КлиентБанк1 } from '../_commons/services/КлиентБанк/bank1.service'

const restartTimeSeconds = +process.env.TIME_RESTART_PERIODICTASKS_SECONDS ?? 10 * 1000

/** Бухгалтерия AccauntingDepartmentService */
@Injectable()
export class Бухгалтерия {
    private runTime = ''
    private регламентныеЗадания = [
        // { task: this.проверитьПочту, timeout: 100 }, //и тд
    ]
    constructor(
        private программа1сУпр: Программа1сУпр,
        private программа1сБухБониксАвто: Программа1сБухБониксАвто,
        private программа1сБухСнаб: Программа1сБухСнаб,
        private ЭлектроннаяПочта: ЭлектроннаяПочта,
        private клиентБанк1: КлиентБанк1
    ) { this.запуститьРегламентныеЗадания() }

    /** Запуск запланированных задач runScheduledTasks*/
    private запуститьРегламентныеЗадания() {
        setInterval(() => {
            this.регламентныеЗадания.forEach(({ task, timeout }) => {
                if (new Date().toISOString() > this.runTime + timeout) {
                    task()
                }
            })
        }, restartTimeSeconds)
    }
    /** проверяет почту checkEmail*/
    protected получитьЭлектронноеПисьмоСПакетомДокументов() {
        //TODO что там внутри ? Кто что? Какие документы формат
        const пакетДокументов = this.ЭлектроннаяПочта.получитьЭлектронноеПисьмо()
        this.провестиПроцедуруПроверкиПакетаДокументов(пакетДокументов)
    }
    /** Проверить процедуру оценки пакета документов checkDocumentsForImportItems*/
    protected провестиПроцедуруПроверкиПакетаДокументов(пакетДокументов) {
        //TODO почему вэд не проверяет? каких документов
        const isPackValid = undefined
        if (isPackValid) this.проверитьКомплектацию()
    }
    /** проверить комплектацию checkPackage*/
    protected проверитьКомплектацию() {
        //TODO как проверяет?
        const isPackValid = undefined
        if (isPackValid) {
            this.подготовитьЭкономическоеОбоснование()
        }
    }
    /** подготовить экономическое обоснование */
    protected подготовитьЭкономическоеОбоснование() {

    }
    /** оприходовать товар processReceiptGoods*/
    protected оприходоватьТовар() {

    }
    /** импортировать ППВ из бух в упр 1с
     * документы разделяют между пользователями
     * один вводит ППВ при этом в выписке после импорта удаляет ППИ
     * другой наоборот
     * в обработке нужно проставить договор
    */
    protected импортироватьДокументыППВИзБухВУпр() {
        const документы: any = this.программа1сУпр.запуститьОбработкуИмпортаВыписки()
        if ('user1') документы.filter(() => 'ППИ')
        if ('user2') документы.filter(() => 'ППВ')
    }
    /** импортировать ППИ из бух в упр 1с
     * документы разделяют между пользователями
     * один вводит ППВ при этом в выписке после импорта удаляет ППИ
     * другой наоборот
     * в обработке нужно проставить договор
    */
    protected импортироватьДокументыППИИзБухВУпр() {
        const документы = this.программа1сУпр.запуститьОбработкуИмпортаВыписки()
    }
    /** проверка разнесения взаиморасчетов по договорам и накладным в 1с Упр
     * после импорта выписки обработкой
     * есть контрагенты которые требуют разнесения по накладным
     * что бы правильно отправлялась смс нужно правильно разнести задолженность по накладным
     */
    protected проверкаРазнесенияВзаиморасчетовПоДоговорамВ1сУпр() {
    }
    /** блокировка контрагентов
     * после разнесения выписки создается док блок контр в который попадают контр с просроченной задолженностью автоматич
     * есть блокировка по долгу а есть по статусу
     * у контрагента есть основной менеджер и торговый представитель
     * в накладной стоит срок оплаты отсчитывается отсрочка дн и после 3-х дней после блокируется
     * срок оплаты в накладной рассчитывается из карточки контрагента в реквизите глубина кредита
     * система отсчитывает от даты реализации календарные дни
     */
    protected блокировкаКонтрагентов() {
        //TODO проверить автоматически ли попадают
        this.программа1сУпр.создатьИПровестиДокументБлокировкаКонтрагентов()
    }
    /** разблокировка контрагентов
     * 
     */
    protected разблокировкаКонтрагентов() {
        this.программа1сУпр.запуститьОбработкуРазблокировкиКонтрагентовСДЗ()
    }
    /** провести валютные документы ППВ в бух
     * полученные путем просмотра журнала клиентБанка
     */
    protected отразитьВалютОперациюППВВДок1сБухИзКлиентБанка() {
        //TODO банки разные ?
        const документыППВ = this.клиентБанк1.просмотрВалютныхППВ()
        this.программа1сБухСнаб.создатьИПровестиВалютноеПлатежноеПоручениеВходящее(документыППВ)
    }
    /** провести валютные документы ППИ в бух
     * полученные путем просмотра журнала клиентБанка
     */
    protected отразитьВалютОперациюППИВДок1сБухИзКлиентБанка() {
        //TODO банки разные тогда у юзеров использующих метод размножить ?
        const документыППВ = this.клиентБанк1.просмотрВалютныхППВ()
        this.программа1сБухСнаб.создатьИПровестиВалютноеПлатежноеПоручениеИсходящее(документыППВ)
    }
    /** отражение операции покупка валюты Снаб
     * создание документа Конвертация валюты
     *при покупке валюты в банке разносится в документ конвертация валюты
     */
    protected отразитьОперациюКонвертациюВалютыСнаб() {
        const документКонвертацииВалюты = this.клиентБанк1.просмотрЗаявокНаПокупкуВалюты()
        this.программа1сБухСнаб.создатьИПровестиКонвертацияВалюты(документКонвертацииВалюты)
    }
    /** отражение операции покупка валюты Боникс
     * создание документа Конвертация валюты
     *при покупке валюты в банке разносится в документ конвертация валюты
     */
    protected отразитьОперациюКонвертациюВалютыБоникс() {
        const документКонвертацииВалюты = this.клиентБанк1.просмотрЗаявокНаПокупкуВалюты()
        this.программа1сБухБониксАвто.создатьИПровестиКонвертацияВалюты(документКонвертацииВалюты)
    }
    // /** перенести документы ППИ из 1с бух БониксАвто
    //  * открыть журнал 1с бух ППИ и создать аналогичные документы в 1с упр
    //  */
    // protected перенестиДокументППИИзБухБониксАвтоВ1сУпр() {
    //     const документыППИ = this.программа1сБухБониксАвто.просмотрДокументовППИ()
    //     const документыДляПереноса = документыППИ.filter((документ) => документ.дата === Date.now())
    //     документыДляПереноса.forEach((документ) => {
    //         const item = { ...документ }
    //         this.программа1сУпр.создатьИПровестиДокуементыПлатежноеПоручениеИсходящее(item)
    //     })
    // }

    // /** перенести документы ППВ из 1с бух БониксАвто
    //  * открыть журнал 1с бух ППИ и создать аналогичные документы в 1с упр
    //  */
    // protected перенестиДокументППВИзБухБониксАвтоВ1сУпр() {
    //     const документыППИ = this.программа1сБухБониксАвто.просмотрДокументовППИ()
    //     const документыДляПереноса = документыППИ.filter((документ) => документ.дата === Date.now())
    //     документыДляПереноса.forEach((документ) => {
    //         const item = { ...документ }
    //         this.программа1сУпр.создатьИПровестиДокуементыПлатежноеПоручениеИсходящее(item)
    //     })
    // }

    // /** перенести документы ППИ из 1с бух Снаб
    //   * открыть журнал 1с бух ППИ и создать аналогичные документы в 1с упр
    //   */
    // protected перенестиДокументППИИзБухСнабВ1сУпр() {
    //     const документыППИ = this.программа1сБухСнаб.просмотрДокументовППИ()
    //     const документыДляПереноса = документыППИ.filter((документ) => документ.дата === Date.now())
    //     документыДляПереноса.forEach((документ) => {
    //         const item = { ...документ }
    //         this.программа1сУпр.создатьИПровестиДокуементыПлатежноеПоручениеИсходящее(item)
    //     })
    // }
}
